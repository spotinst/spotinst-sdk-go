GO         := GO111MODULE=on go
DOCKER     := docker
GORELEASER := goreleaser/goreleaser:v0.123-cgo
GIT_DIRTY  := $(shell test -n "`git status --porcelain`" && echo ".CHANGES" || true)
VERSION    := $$(grep 'SDKVersion =' spotinst/version.go | awk '{print $$4}' | xargs)

define goreleaser_release
	$(DOCKER) run --rm \
		-v $(PWD):/go/src/github.com/spotinst/spotinst-sdk-go \
		-w /go/src/github.com/spotinst/spotinst-sdk-go \
		-e GITHUB_TOKEN=$(GITHUB_TOKEN) \
		-e VERSION=$(VERSION) \
		$(GORELEASER) release --rm-dist
endef

##@ Development

.PHONY: release
release: fmt ## Release a new version
ifneq ($(strip $(GIT_DIRTY)),)
	@echo "Git is currently in a dirty state. Please commit your changes or stash them before you release."; exit 1;
else
	@read -p "Bump version: $(VERSION) â†’ " version; sed -i "s/$(VERSION)/$$version/g" spotinst/version.go && \
	git commit -am "release: v$(VERSION)" && \
	git tag v$(VERSION) && \
	git push && \
	$(call goreleaser_release)
endif

.PHONY: test
test: fmt ## Run all tests
	@mkdir -p dist/ && \
	$(GO) test \
		-v $$($(GO) list ./... | grep -v vendor) $(TESTARGS) \
		-covermode=atomic \
		-coverprofile=dist/coverage.txt \
		-race \
		-timeout=30s \
		-parallel=4

.PHONY: cover
cover: test ## Run all tests and open the coverage report
	@$(GO) tool cover -html=dist/coverage.txt

.PHONY: tidy
tidy: ## Add missing and remove unused modules
	@$(GO) mod tidy

.PHONY: vendor
vendor: ## Make vendored copy of all dependencies
	@$(GO) mod vendor

.PHONY: fmt
fmt: ## Format the code
	@gofmt -s -w $$($(GO) list -f {{.Dir}} ./... | grep -v /vendor/)

.PHONY: imports
imports: ## Optimize imports
	@goimports -w $$($(GO) list -f {{.Dir}} ./... | grep -v /vendor/)

.PHONY: vet
vet: ## Analyze the code
	@$(GO) vet ./...

.PHONY: clean
clean: ## Clean all generated artifacts
	@rm -rf dist
